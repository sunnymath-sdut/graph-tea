<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>图染色方法笔记：序</title>
    <link href="/graph-tea/2024/12/31/graph-color-notes-0/"/>
    <url>/graph-tea/2024/12/31/graph-color-notes-0/</url>
    
    <content type="html"><![CDATA[<p>这是 Daniel W. Cranston 所撰写的《Graph ColoringMethods》一书的学习笔记， 作者将该书全文发布于https://graphcoloringmethods.com/ ，包括如下章节：</p><ul><li>Greedy Coloring</li><li>Gadgets: Constructions for Lower Bounds</li><li>Recoloring</li><li>Vertex Identification: Coloring Planar Graphs</li><li>The Kernel Method</li><li>Deletion and Contraction: Nowhere-Zero Flows</li><li>Rosenfeld Counting</li><li>The Combinatorial Nullstellensatz</li><li>The Activation Strategy</li><li>The Vertex Shuffle</li><li>Precoloring Extension</li><li>The Potential Method</li><li>The Rest of the Story</li></ul><div style="text-align: right"><p><span class="math inline">\(\Box\)</span></p></div>]]></content>
    
    
    <categories>
      
      <category>图染色笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图论, 染色</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图染色方法笔记：第一章 贪心染色（1.1节）</title>
    <link href="/graph-tea/2024/12/31/graph-color-notes-1-1/"/>
    <url>/graph-tea/2024/12/31/graph-color-notes-1-1/</url>
    
    <content type="html"><![CDATA[<p>在这本书中，我们研究如何将一个集合划分为满足某些约束条件的子集。这个问题出现在设计电路、编译计算机代码时分配寄存器、解决数独谜题和安排飞行机组等多样的情境中。所有这些问题都可以用图染色的语言来描述，其中每种颜色代表划分中的一个子集，我们的目标是最小化颜色的数量。</p><p>一般的图染色问题没有简单的答案。更准确地说，它是 NP-hard的<sup><a href="#footnote1">[1]</a></sup>。因此，我们不太可能找到一个高效的算法来在任意输入图上最优地解决染色问题。这个基本的难度结果给图染色的世界投下了长长的阴影。</p><p>与许多关于生成树、连通性和匹配的问题（对于这些问题我们有能给出最优解的高效算法）形成对比的是，对于图染色，我们主要关注于证明上下界。我们还关注图的结构，集中于平面图和其他表现出某种稀疏性的图类。</p><p>一个自然的想法是逐个考虑集合中的元素，将每个元素分配给第一个不被已经分配在那里的某个元素禁止的子集。这种贪心方法的表现可能非常好，也可能非常糟糕，这取决于我们考虑元素的顺序。在这一章中，我们寻找好的顺序，并研究它们为解决染色问题的最小颜色数量提供了什么界限。</p>脚注：<ol><li id="footnote1">我们将在第A.1节给出了一个正式的定义。</li></ol><h2 id="退化性权转移和布鲁克斯定理">1.1退化性、权转移和布鲁克斯定理</h2><h3 id="关键思想和定义">1.1.1 关键思想和定义</h3><blockquote><p><strong>定义1.1</strong> 一个<strong>图</strong> <spanclass="math inline">\(G\)</span> 由一个顶点集 <spanclass="math inline">\(V(G)\)</span>、一个边集 <spanclass="math inline">\(E(G)\)</span>组成，每条<strong>边</strong>是一对无序的顶点，称为边的<strong>端点</strong>。（在上面的问题中，顶点是划分的元素，边是禁止在同一部分中出现的顶点对。）如果两个顶点形成一条边，则称这两个顶点<strong>相邻</strong>。对于一个图<span class="math inline">\(G\)</span>，我们写 <spanclass="math inline">\(|G|\)</span> 来表示其顶点集的大小，<spanclass="math inline">\(\|G\|\)</span>表示其边集的大小。在图中的一条<strong>路</strong> <spanclass="math inline">\(P\)</span> 是一系列边 <spanclass="math inline">\(e_1\)</span>, <spanclass="math inline">\(\cdots\)</span>, <spanclass="math inline">\(e_\ell\)</span>，使得每一对 <spanclass="math inline">\(e_i\)</span> 和 <spanclass="math inline">\(e_{i+1}\)</span> 都有一个共享的端点，且没有其他边<span class="math inline">\(e_j\)</span> 有那个端点。（我们允许 <spanclass="math inline">\(\ell=1\)</span> 甚至 <spanclass="math inline">\(\ell=0\)</span> 的可能性，所以 <spanclass="math inline">\(P\)</span>可能没有边。）路的<strong>端点</strong>是仅作为 <spanclass="math inline">\(e_1\)</span> 和 <spanclass="math inline">\(e_\ell\)</span> 端点的顶点。由路与端点 <spanclass="math inline">\(v_0\)</span> 和 <spanclass="math inline">\(v_\ell\)</span> 通过添加边 <spanclass="math inline">\(v_\ell v_0\)</span>形成<strong>圈</strong>。路或圈的<strong>长度</strong>是其边的数量。如果对于所有的<span class="math inline">\(v\)</span>, <span class="math inline">\(w\inV(G)\)</span>，存在一条在 <span class="math inline">\(G\)</span>中的路，其端点为 <span class="math inline">\(v\)</span> 和 <spanclass="math inline">\(w\)</span>，则图 <spanclass="math inline">\(G\)</span>是<strong>连通的</strong>。如果图的边子集不形成圈，则称图是<strong>无圈的</strong>。一个连通的无圈图是一棵<strong>树</strong>，树的不相交并集是<strong>森林</strong>。除非另有说明，所有的图都是无向的，没有环和没有平行边。这样的图是<strong>简单的</strong>。</p></blockquote><p><a name="fig:1.1"></a> <img src="1-1.png" title="图 1.1"alt="1-1" /></p><p>例如，图 1.1 中的图 <spanclass="math inline">\(G\)</span>（用不同的着色显示了两次）是简单的，有<span class="math inline">\(|G| = 8\)</span> 和 <spanclass="math inline">\(\|G\| =12\)</span>。它是连通的，但远非无圈；因此，它既不是树也不是森林。它包含许多长度从<span class="math inline">\(0\)</span> 到 <spanclass="math inline">\(7\)</span> 的路和长度从 <spanclass="math inline">\(4\)</span> 到 <spanclass="math inline">\(8\)</span> 的圈（但没有其他长度的路或圈）。 <spanclass="math inline">\(\sigma\)</span>&gt;一个<strong>正常的染色</strong>（或简单地说<strong>染色</strong>）给图的每个顶点分配颜色，使得相邻顶点获得不同的颜色。我们用正整数表示颜色。一个<strong><span class="math inline">\(k\)</span>-染色</strong>是使用最多<span class="math inline">\(k\)</span> 种颜色的合适染色。图 <spanclass="math inline">\(G\)</span> 是 <strong><spanclass="math inline">\(k\)</span>-可染的</strong>，如果它有 <spanclass="math inline">\(k\)</span>-染色。图 <spanclass="math inline">\(G\)</span> 的<strong>色数</strong> <spanclass="math inline">\(\chi(G)\)</span> 是使得 <spanclass="math inline">\(G\)</span> 是 <spanclass="math inline">\(k\)</span>-可染的最小的 <spanclass="math inline">\(k\)</span>。<span class="math inline">\(G\)</span>的使用 <span class="math inline">\(\chi(G)\)</span> 种颜色的染色是 <spanclass="math inline">\(G\)</span> 的一个<strong>最优染色</strong>。</p><p>对图进行染色的一个简单方法是逐个考虑其顶点，以某种顶点顺序 <spanclass="math inline">\(\sigma\)</span>进行，给每个顶点着色，使用其邻点尚未使用的最小颜色。这是一种使用 <spanclass="math inline">\(\sigma\)</span> 的贪心染色。 <a href="#fig:1.1">图1.1</a> 显示了使用不同顶点顺序对同一图进行的两种贪心染色。</p><p>在这本书中，我们关注染色的存在性，而不是产生它们的算法，因此我们通常将顶点顺序<span class="math inline">\(\sigma\)</span>隐含起来，如我们在我们第一个命题的证明中所做的。然而，我们在 <ahref="#sec:1.1.3">1.1.3 节</a>的末尾简要讨论了将存在性证明转换为高效算法的方法。（对于我们的几乎所有证明，我们都可以这样做。）</p><p>对于每个图 <span class="math inline">\(G\)</span>，存在一个顶点顺序<span class="math inline">\(\sigma\)</span> ，使得使用 <spanclass="math inline">\(\sigma\)</span> 对 <spanclass="math inline">\(G\)</span>进行贪心染色产生最优染色。（给定一个最优染色，通过首先列出所有着色为<span class="math inline">\(1\)</span> 的顶点，然后是着色为 <spanclass="math inline">\(2\)</span> 的顶点，依此类推，形成 <spanclass="math inline">\(\sigma\)</span>。）但这个观察并没有提供一个高效算法，因为每个图 <spanclass="math inline">\(G\)</span> 有 <spanclass="math inline">\(|G|!\)</span>可能的顶点顺序——远远超过我们尝试的所有顺序。即使对于色数为 <spanclass="math inline">\(2\)</span> 的图类，一些顶点顺序的表现也很差（见 <ahref="#exer:1">练习 1</a>）。幸运的是，我们通常可以使用 <spanclass="math inline">\(G\)</span> 的结构快速找到一个好顺序 <spanclass="math inline">\(\sigma\)</span> ，尽管可能不是最优的。</p><blockquote><p><strong>命题 1.2</strong> 如果 <span class="math inline">\(G\)</span>是森林，则 <span class="math inline">\(\chi(G) \le 2\)</span>。</p></blockquote><blockquote><p><strong>证明.</strong> 假设命题是错误的，令 <spanclass="math inline">\(G\)</span> 是一个顶点数最少的反例。由于 <spanclass="math inline">\(G\)</span> 是森林，它包含一个顶点 <spanclass="math inline">\(v\)</span>，其度数最多为 <spanclass="math inline">\(1\)</span>。令 <span class="math inline">\(G&#39;:= G − v\)</span>。由于 <span class="math inline">\(G&#39;\)</span>也是森林，并且 <span class="math inline">\(G&#39;\)</span> 的顶点数少于<span class="math inline">\(G\)</span>，而 <spanclass="math inline">\(G\)</span> 是最小的反例，所以结论对 <spanclass="math inline">\(G&#39;\)</span> 成立。也就是说，<spanclass="math inline">\(G&#39;\)</span> 有一个 <spanclass="math inline">\(2\)</span> 染色 <spanclass="math inline">\(\varphi&#39;\)</span>。由于 <spanclass="math inline">\(\varphi&#39;\)</span> 在 <spanclass="math inline">\(v\)</span>的邻点上最多使用一种颜色，我们可以贪心地将染色 <spanclass="math inline">\(\varphi&#39;\)</span> 扩展到 <spanclass="math inline">\(G\)</span>。因此 <spanclass="math inline">\(G\)</span> 根本不是一个反例。<spanclass="math inline">\(\Box\)</span></p></blockquote><h3 id="曲面上的图染色海伍德界">1.1.2 曲面上的图染色：海伍德界</h3><h3 id="权转移法和高效染色算法">1.1.3 权转移法和高效染色算法<a name="sec:1.1.3"></a></h3><h3 id="布鲁克斯定理">1.1.4 布鲁克斯定理</h3><div style="text-align: right"><p><span class="math inline">\(\Box\)</span></p></div>]]></content>
    
    
    <categories>
      
      <category>图染色笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图论, 染色</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数学软件：序</title>
    <link href="/graph-tea/2024/12/30/matlab-index/"/>
    <url>/graph-tea/2024/12/30/matlab-index/</url>
    
    <content type="html"><![CDATA[<p>这里将包含线性代数课程的教学内容</p><div style="text-align: right"><p><span class="math inline">\(\Box\)</span></p></div>]]></content>
    
    
    <categories>
      
      <category>MATLAB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MATLAB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解析几何（II）：序</title>
    <link href="/graph-tea/2024/12/30/ana-geo-sec-index/"/>
    <url>/graph-tea/2024/12/30/ana-geo-sec-index/</url>
    
    <content type="html"><![CDATA[<p>这里将包含解析几何（II）课程的教学内容</p><div style="text-align: right"><p><span class="math inline">\(\Box\)</span></p></div>]]></content>
    
    
    <categories>
      
      <category>解析几何（II）</category>
      
    </categories>
    
    
    <tags>
      
      <tag>解析几何（II）</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>线性代数：序</title>
    <link href="/graph-tea/2024/12/30/lin-alge-index/"/>
    <url>/graph-tea/2024/12/30/lin-alge-index/</url>
    
    <content type="html"><![CDATA[<p>这里将包含线性代数课程的教学内容</p><div style="text-align: right"><p><span class="math inline">\(\Box\)</span></p></div>]]></content>
    
    
    <categories>
      
      <category>线性代数</category>
      
    </categories>
    
    
    <tags>
      
      <tag>线性代数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解析几何（I）：序</title>
    <link href="/graph-tea/2024/12/30/ana-geo-index/"/>
    <url>/graph-tea/2024/12/30/ana-geo-index/</url>
    
    <content type="html"><![CDATA[<p>这里将包含解析几何（I）课程的教学内容</p><div style="text-align: right"><p><span class="math inline">\(\Box\)</span></p></div>]]></content>
    
    
    <categories>
      
      <category>解析几何（I）</category>
      
    </categories>
    
    
    <tags>
      
      <tag>解析几何</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图论及其应用（本科）：序</title>
    <link href="/graph-tea/2024/12/30/graph-index/"/>
    <url>/graph-tea/2024/12/30/graph-index/</url>
    
    <content type="html"><![CDATA[<p>这里将包含图论课程的教学内容</p><div style="text-align: right"><p><span class="math inline">\(\Box\)</span></p></div>]]></content>
    
    
    <categories>
      
      <category>图论（本科）</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>新希望：写在2024年即将结束的时候</title>
    <link href="/graph-tea/2024/12/29/hello-world/"/>
    <url>/graph-tea/2024/12/29/hello-world/</url>
    
    <content type="html"><![CDATA[<p>12 年前，我开始念博士，转眼间，又过去了 12 年，12年来颇有一事无成、徒增马齿的感觉。现在，我搬了新家，让一切从新开始吧！</p><div style="text-align: right"><p><span class="math inline">\(\Box\)</span></p></div>]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
